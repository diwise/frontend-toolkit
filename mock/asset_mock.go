// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"sync"
)

// AssetMock is a mock implementation of frontendtoolkit.Asset.
//
//	func TestSomethingThatUsesAsset(t *testing.T) {
//
//		// make and configure a mocked frontendtoolkit.Asset
//		mockedAsset := &AssetMock{
//			BodyFunc: func() []byte {
//				panic("mock out the Body method")
//			},
//			ContentLengthFunc: func() int {
//				panic("mock out the ContentLength method")
//			},
//			ContentTypeFunc: func() string {
//				panic("mock out the ContentType method")
//			},
//			PathFunc: func() string {
//				panic("mock out the Path method")
//			},
//			SHA256Func: func() string {
//				panic("mock out the SHA256 method")
//			},
//		}
//
//		// use mockedAsset in code that requires frontendtoolkit.Asset
//		// and then make assertions.
//
//	}
type AssetMock struct {
	// BodyFunc mocks the Body method.
	BodyFunc func() []byte

	// ContentLengthFunc mocks the ContentLength method.
	ContentLengthFunc func() int

	// ContentTypeFunc mocks the ContentType method.
	ContentTypeFunc func() string

	// PathFunc mocks the Path method.
	PathFunc func() string

	// SHA256Func mocks the SHA256 method.
	SHA256Func func() string

	// calls tracks calls to the methods.
	calls struct {
		// Body holds details about calls to the Body method.
		Body []struct {
		}
		// ContentLength holds details about calls to the ContentLength method.
		ContentLength []struct {
		}
		// ContentType holds details about calls to the ContentType method.
		ContentType []struct {
		}
		// Path holds details about calls to the Path method.
		Path []struct {
		}
		// SHA256 holds details about calls to the SHA256 method.
		SHA256 []struct {
		}
	}
	lockBody          sync.RWMutex
	lockContentLength sync.RWMutex
	lockContentType   sync.RWMutex
	lockPath          sync.RWMutex
	lockSHA256        sync.RWMutex
}

// Body calls BodyFunc.
func (mock *AssetMock) Body() []byte {
	callInfo := struct {
	}{}
	mock.lockBody.Lock()
	mock.calls.Body = append(mock.calls.Body, callInfo)
	mock.lockBody.Unlock()
	if mock.BodyFunc == nil {
		var (
			bytesOut []byte
		)
		return bytesOut
	}
	return mock.BodyFunc()
}

// BodyCalls gets all the calls that were made to Body.
// Check the length with:
//
//	len(mockedAsset.BodyCalls())
func (mock *AssetMock) BodyCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBody.RLock()
	calls = mock.calls.Body
	mock.lockBody.RUnlock()
	return calls
}

// ContentLength calls ContentLengthFunc.
func (mock *AssetMock) ContentLength() int {
	callInfo := struct {
	}{}
	mock.lockContentLength.Lock()
	mock.calls.ContentLength = append(mock.calls.ContentLength, callInfo)
	mock.lockContentLength.Unlock()
	if mock.ContentLengthFunc == nil {
		var (
			nOut int
		)
		return nOut
	}
	return mock.ContentLengthFunc()
}

// ContentLengthCalls gets all the calls that were made to ContentLength.
// Check the length with:
//
//	len(mockedAsset.ContentLengthCalls())
func (mock *AssetMock) ContentLengthCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockContentLength.RLock()
	calls = mock.calls.ContentLength
	mock.lockContentLength.RUnlock()
	return calls
}

// ContentType calls ContentTypeFunc.
func (mock *AssetMock) ContentType() string {
	callInfo := struct {
	}{}
	mock.lockContentType.Lock()
	mock.calls.ContentType = append(mock.calls.ContentType, callInfo)
	mock.lockContentType.Unlock()
	if mock.ContentTypeFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.ContentTypeFunc()
}

// ContentTypeCalls gets all the calls that were made to ContentType.
// Check the length with:
//
//	len(mockedAsset.ContentTypeCalls())
func (mock *AssetMock) ContentTypeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockContentType.RLock()
	calls = mock.calls.ContentType
	mock.lockContentType.RUnlock()
	return calls
}

// Path calls PathFunc.
func (mock *AssetMock) Path() string {
	callInfo := struct {
	}{}
	mock.lockPath.Lock()
	mock.calls.Path = append(mock.calls.Path, callInfo)
	mock.lockPath.Unlock()
	if mock.PathFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.PathFunc()
}

// PathCalls gets all the calls that were made to Path.
// Check the length with:
//
//	len(mockedAsset.PathCalls())
func (mock *AssetMock) PathCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPath.RLock()
	calls = mock.calls.Path
	mock.lockPath.RUnlock()
	return calls
}

// SHA256 calls SHA256Func.
func (mock *AssetMock) SHA256() string {
	callInfo := struct {
	}{}
	mock.lockSHA256.Lock()
	mock.calls.SHA256 = append(mock.calls.SHA256, callInfo)
	mock.lockSHA256.Unlock()
	if mock.SHA256Func == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.SHA256Func()
}

// SHA256Calls gets all the calls that were made to SHA256.
// Check the length with:
//
//	len(mockedAsset.SHA256Calls())
func (mock *AssetMock) SHA256Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockSHA256.RLock()
	calls = mock.calls.SHA256
	mock.lockSHA256.RUnlock()
	return calls
}
